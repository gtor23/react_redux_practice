{"ast":null,"code":"// create a reducer\n//reducer takes in 2 parameters: initial state and action\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  //use a switch statement with reducers\n  switch (action.type) {\n    case 'deposit':\n      return state + action.payload;\n\n    case 'withdraw':\n      return state - action.payload;\n\n    default:\n      //set a default in case there isn't a deposit or withdraw\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/jtorres/codepractice/reactRedux/src/state/reducers/accountReducer.js"],"names":["reducer","state","action","type","payload"],"mappings":"AAAA;AACA;AACA,MAAMA,OAAO,GAAG,YAAuB;AAAA,MAAtBC,KAAsB,uEAAd,CAAc;AAAA,MAAXC,MAAW;;AACnC;AACA,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,SAAL;AACI,aAAOF,KAAK,GAAGC,MAAM,CAACE,OAAtB;;AACJ,SAAK,UAAL;AACI,aAAOH,KAAK,GAAGC,MAAM,CAACE,OAAtB;;AACJ;AAAa;AACT,aAAOH,KAAP;AANR;AAQH,CAVD;;AAYA,eAAeD,OAAf","sourcesContent":["// create a reducer\n//reducer takes in 2 parameters: initial state and action\nconst reducer = (state = 0, action) => {\n    //use a switch statement with reducers\n    switch (action.type) {\n        case 'deposit':\n            return state + action.payload;\n        case 'withdraw':\n            return state - action.payload;\n        default:     //set a default in case there isn't a deposit or withdraw\n            return state \n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}